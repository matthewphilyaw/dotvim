set nocompatible

if has('win32') || has('win64')
    set runtimepath=$HOME/.vim,$VIMRUNTIME,$HOME/.vim/after
endif

set background=dark

" Bundles {

    source ~/.vim/bundles.vim

" }


" System {

    autocmd bufwritepost .vimrc source $MYVIMRC
    autocmd bufwritepost vimrc source $MYVIMRC

    filetype on
    filetype plugin on
    filetype indent on
    scriptencoding utf-8

    set history=1000
    set tags=./tags;/,~/.vimtags

    nnoremap <leader>b :Make<cr>

" }


" Searching {

    set incsearch
    set hlsearch 
    set ignorecase
    set smartcase
    nnoremap <c-c> :noh<cr><c-c>

" }


" Editing {

    set tabstop=2
    set shiftwidth=2
    set expandtab
    set backspace=indent,eol,start
    set foldmethod=syntax
    set nofoldenable
    set undolevels=1000
    set pastetoggle=<F2>

    set wildmenu                    " show list instead of just completing
    set wildmode=list:longest,full  " command <Tab> completion, list matches, then longest common part, then all.

    set list
    set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace

" }


" Buffers {

    no <C-h> <C-w>h
    no <C-j> <C-w>j
    no <C-k> <C-w>k
    no <C-l> <C-w>l

    set hidden

" }


" Styling {

    syntax enable
    colorscheme wombat256i

    set showcmd
    set showmode
    set number

    set laststatus=2

    if has('gui_running')
        set lines=50 columns=95
    else
        if &term == 'xterm' || &term == 'screen'
            set t_Co=256
        endif
    endif

    if has("gui_macvim")
          set guifont=Menlo
      elseif has("gui_running")
        set guifont=Consolas
    endif

    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L

" }


map <leader>f :NERDTreeToggle<cr>
let NERDTreeIgnore=['\.pyc', '\.beam', '\.o', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']

map <leader>c :TagbarOpenAutoClose<cr>

let g:ctrlp_custom_ignore = { 
    \ 'dir':  'obj$\|build$\|ebin$\|\.git$\|\.hg$\|\.svn$\|deps$\|_build$\|node_modules$\|bower_components$\|vendor$',
    \ 'file': '\.beam$\|\.exe$\|\.so$\|\.dll$\|\.o$' } 


let g:UltiSnipsExpandTrigger='<c-e>'
let g:UltiSnipsJumpForwardTrigger='<c-j>'
let g:UltiSnipsJumpBackwardTrigger='<c-k>'

let g:ack_use_dispatch=1

let g:airline_powerline_fonts = 1
let g:ctrlp_show_hidden = 1
